"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/page",{

/***/ "(app-pages-browser)/./services/api.ts":
/*!*************************!*\
  !*** ./services/api.ts ***!
  \*************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiService: () => (/* binding */ apiService)\n/* harmony export */ });\n/* harmony import */ var _mockData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mockData */ \"(app-pages-browser)/./services/mockData.ts\");\n\n\nclass ApiService {\n    async login(username, password) {\n        // Mock authentication\n        const user = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockUsers.find((u)=>u.username === username);\n        if (!user) {\n            throw new Error('Invalid credentials');\n        }\n        this.currentUser = user;\n        localStorage.setItem('currentUser', JSON.stringify(user));\n        return user;\n    }\n    getCurrentUser() {\n        if (!this.currentUser) {\n            const stored = localStorage.getItem('currentUser');\n            if (stored) {\n                this.currentUser = JSON.parse(stored);\n            }\n        }\n        return this.currentUser;\n    }\n    logout() {\n        this.currentUser = null;\n        localStorage.removeItem('currentUser');\n    }\n    generateQRValue(metadata1, index) {\n        const parts = [\n            metadata1.bankName,\n            metadata1.merchantName,\n            metadata1.merchantId\n        ];\n        if (metadata1.terminalId) {\n            parts.push(metadata1.terminalId);\n        }\n        return parts.join('\\n');\n    }\n    async generateQRCodes(count, type, metadata1) {\n        // Validate mandatory fields\n        if (!(metadata1 === null || metadata1 === void 0 ? void 0 : metadata1.bankName) || !(metadata1 === null || metadata1 === void 0 ? void 0 : metadata1.merchantName) || !(metadata1 === null || metadata1 === void 0 ? void 0 : metadata1.merchantId)) {\n            throw new Error('Bank Name, Merchant Name, and Merchant ID are required fields');\n        }\n        // Mock QR generation\n        const newQRs = Array.from({\n            length: count\n        }, (_, i)=>({\n                id: \"qr_gen_\".concat(Date.now(), \"_\").concat(i),\n                qrValue: this.generateQRValue(metadata1, i),\n                qrType: type,\n                generationSource: 'system',\n                status: 'unallocated',\n                bankName: metadata1 === null || metadata1 === void 0 ? void 0 : metadata1.bankName,\n                merchantName: metadata1 === null || metadata1 === void 0 ? void 0 : metadata1.merchantName,\n                createdAt: new Date().toISOString(),\n                terminalId: (metadata1 === null || metadata1 === void 0 ? void 0 : metadata1.terminalId) || undefined,\n                updatedAt: new Date().toISOString()\n            }));\n        _mockData__WEBPACK_IMPORTED_MODULE_0__.mockQRCodes.push(...newQRs);\n        this.logAction('QR_GENERATED', 'qr_code', {\n            count,\n            type\n        });\n        return newQRs;\n    }\n    async uploadQRCodes(file) {\n        // Mock file upload processing\n        const count = Math.floor(Math.random() * 50) + 10;\n        const newQRs = Array.from({\n            length: count\n        }, (_, i)=>{\n            var _metadata, _this_currentUser;\n            return {\n                id: \"qr_upload_\".concat(Date.now(), \"_\").concat(i),\n                qrValue: \"UPL\".concat(Date.now()).concat(String(i).padStart(3, '0')),\n                qrType: 'static',\n                generationSource: 'upload',\n                merchantBankAccount: (_metadata = metadata) === null || _metadata === void 0 ? void 0 : _metadata.merchantBankAccount,\n                uploadFileId: \"file_\".concat(Date.now()),\n                createdBy: ((_this_currentUser = this.currentUser) === null || _this_currentUser === void 0 ? void 0 : _this_currentUser.id) || '1',\n                createdAt: new Date().toISOString(),\n                updatedAt: new Date().toISOString()\n            };\n        });\n        _mockData__WEBPACK_IMPORTED_MODULE_0__.mockQRCodes.push(...newQRs);\n        this.logAction('QR_UPLOADED', 'qr_code', {\n            filename: file.name,\n            count\n        });\n        return newQRs;\n    }\n    async getQRCodes(filters) {\n        const currentUser = this.getCurrentUser();\n        let qrs = [\n            ..._mockData__WEBPACK_IMPORTED_MODULE_0__.mockQRCodes\n        ];\n        if (filters === null || filters === void 0 ? void 0 : filters.status) {\n            qrs = qrs.filter((qr)=>qr.status === filters.status);\n        }\n        if (filters === null || filters === void 0 ? void 0 : filters.branchId) {\n            qrs = qrs.filter((qr)=>qr.allocatedBranchId === filters.branchId);\n        }\n        // For sales users, show only their QRs\n        if ((currentUser === null || currentUser === void 0 ? void 0 : currentUser.role) === 'SALES_USER') {\n            qrs = qrs.filter((qr)=>qr.allocatedToUserId === currentUser.id);\n        }\n        return qrs;\n    }\n    async allocateQRsToBranch(qrIds, branchId) {\n        qrIds.forEach((qrId)=>{\n            const qr = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockQRCodes.find((q)=>q.id === qrId);\n            if (qr) {\n                qr.status = 'allocated';\n                qr.allocatedBranchId = branchId;\n                qr.updatedAt = new Date().toISOString();\n            }\n        });\n        this.logAction('QR_ALLOCATED', 'qr_code', {\n            qrIds,\n            branchId\n        });\n    }\n    async createAllocationRequest(data) {\n        var _this_currentUser;\n        const request = {\n            id: \"req_\".concat(Date.now()),\n            requestNumber: \"REQ\".concat(String(_mockData__WEBPACK_IMPORTED_MODULE_0__.mockAllocationRequests.length + 1).padStart(3, '0')),\n            branchId: data.branchId,\n            initiatorUserId: ((_this_currentUser = this.currentUser) === null || _this_currentUser === void 0 ? void 0 : _this_currentUser.id) || '1',\n            requestedQrCount: data.requestedQrCount,\n            requestedFor: data.requestedFor,\n            status: 'pending',\n            notes: data.notes || '',\n            createdAt: new Date().toISOString()\n        };\n        _mockData__WEBPACK_IMPORTED_MODULE_0__.mockAllocationRequests.push(request);\n        this.logAction('REQUEST_CREATED', 'allocation_request', request);\n        return request;\n    }\n    async approveRequest(requestId, notes) {\n        const request = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockAllocationRequests.find((r)=>r.id === requestId);\n        if (request) {\n            var _this_currentUser;\n            request.status = 'approved';\n            request.approverUserId = (_this_currentUser = this.currentUser) === null || _this_currentUser === void 0 ? void 0 : _this_currentUser.id;\n            request.approvedAt = new Date().toISOString();\n            if (notes) request.notes += \"\\nApproval notes: \".concat(notes);\n        }\n        this.logAction('REQUEST_APPROVED', 'allocation_request', {\n            requestId,\n            notes\n        });\n    }\n    async rejectRequest(requestId, reason) {\n        const request = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockAllocationRequests.find((r)=>r.id === requestId);\n        if (request) {\n            var _this_currentUser;\n            request.status = 'rejected';\n            request.approverUserId = (_this_currentUser = this.currentUser) === null || _this_currentUser === void 0 ? void 0 : _this_currentUser.id;\n            request.notes += \"\\nRejection reason: \".concat(reason);\n        }\n        this.logAction('REQUEST_REJECTED', 'allocation_request', {\n            requestId,\n            reason\n        });\n    }\n    async returnRequestForCorrection(requestId, reason) {\n        const request = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockAllocationRequests.find((r)=>r.id === requestId);\n        if (request) {\n            var _this_currentUser;\n            request.status = 'pending';\n            request.approverUserId = (_this_currentUser = this.currentUser) === null || _this_currentUser === void 0 ? void 0 : _this_currentUser.id;\n            request.notes += \"\\nReturned for correction: \".concat(reason);\n        }\n        this.logAction('REQUEST_RETURNED_FOR_CORRECTION', 'allocation_request', {\n            requestId,\n            reason\n        });\n    }\n    async updateAllocationRequest(requestId, updates) {\n        const request = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockAllocationRequests.find((r)=>r.id === requestId);\n        if (request) {\n            Object.assign(request, updates);\n            request.status = 'pending'; // Reset to pending when edited\n        }\n        this.logAction('REQUEST_UPDATED', 'allocation_request', {\n            requestId,\n            updates\n        });\n    }\n    async getAllocationRequests(branchId) {\n        const currentUser = this.getCurrentUser();\n        let requests = [\n            ..._mockData__WEBPACK_IMPORTED_MODULE_0__.mockAllocationRequests\n        ];\n        if (branchId) {\n            requests = requests.filter((r)=>r.branchId === branchId);\n        }\n        // For sales users, show only their requests\n        if ((currentUser === null || currentUser === void 0 ? void 0 : currentUser.role) === 'SALES_USER') {\n            requests = requests.filter((r)=>r.initiatorUserId === currentUser.id);\n        }\n        return requests;\n    }\n    async issueQRToMerchant(qrId, merchantData) {\n        const qr = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockQRCodes.find((q)=>q.id === qrId);\n        if (qr) {\n            qr.status = 'issued';\n            qr.issuedToMerchantId = merchantData.id;\n            qr.updatedAt = new Date().toISOString();\n        }\n        this.logAction('QR_ISSUED', 'qr_code', {\n            qrId,\n            merchantData\n        });\n    }\n    async returnQR(qrId, reason, condition) {\n        var _this_currentUser;\n        const qr = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockQRCodes.find((q)=>q.id === qrId);\n        if (qr) {\n            qr.status = 'returned';\n            qr.updatedAt = new Date().toISOString();\n        }\n        const returnRecord = {\n            id: \"ret_\".concat(Date.now()),\n            qrId,\n            returnedByUserId: ((_this_currentUser = this.currentUser) === null || _this_currentUser === void 0 ? void 0 : _this_currentUser.id) || '1',\n            returnedAt: new Date().toISOString(),\n            reason,\n            condition,\n            status: 'pending'\n        };\n        this.logAction('QR_RETURNED', 'qr_code', {\n            qrId,\n            reason,\n            condition\n        });\n        return returnRecord;\n    }\n    async getDashboardStats(branchId) {\n        var _branches_find;\n        const qrs = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockQRCodes;\n        const requests = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockAllocationRequests;\n        const users = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockUsers;\n        const branches = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockBranches;\n        // Filter data by branch if branchId is provided (for branch approvers)\n        const filteredQRs = branchId ? qrs.filter((q)=>q.allocatedBranchId === branchId) : qrs;\n        const filteredRequests = branchId ? requests.filter((r)=>r.branchId === branchId) : requests;\n        const filteredUsers = branchId ? users.filter((u)=>u.branchId === branchId) : users;\n        const filteredActivity = branchId ? _mockData__WEBPACK_IMPORTED_MODULE_0__.mockAuditLogs.filter((log)=>{\n            var _log_payload;\n            // Filter activity by branch-related actions\n            return ((_log_payload = log.payload) === null || _log_payload === void 0 ? void 0 : _log_payload.branchId) === branchId || log.targetEntity === 'allocation_request' && filteredRequests.some((r)=>{\n                var _log_payload;\n                return r.id === ((_log_payload = log.payload) === null || _log_payload === void 0 ? void 0 : _log_payload.requestId);\n            });\n        }) : _mockData__WEBPACK_IMPORTED_MODULE_0__.mockAuditLogs;\n        // Sync QR codes with users and branches\n        this.syncQRCodesWithUsersAndBranches();\n        // Calculate accurate counts based on role and user context\n        const currentUser = this.getCurrentUser();\n        let totalQRs, unallocated, allocated, issued, returned, blocked;\n        if (branchId) {\n            // For branch-specific roles (branch managers, approvers, sales users)\n            totalQRs = filteredQRs.length;\n            unallocated = 0; // Branch users don't see unallocated QRs\n            allocated = filteredQRs.filter((q)=>q.status === 'allocated').length;\n            issued = filteredQRs.filter((q)=>q.status === 'issued').length;\n            returned = filteredQRs.filter((q)=>q.status === 'returned').length;\n            blocked = filteredQRs.filter((q)=>q.status === 'blocked').length;\n            // For sales users, further filter to show only their issued QRs\n            if ((currentUser === null || currentUser === void 0 ? void 0 : currentUser.role) === 'SALES_USER') {\n                const userIssuedQRs = filteredQRs.filter((q)=>q.allocatedToUserId === currentUser.id);\n                totalQRs = userIssuedQRs.length;\n                allocated = userIssuedQRs.filter((q)=>q.status === 'allocated').length;\n                issued = userIssuedQRs.filter((q)=>q.status === 'issued').length;\n                returned = userIssuedQRs.filter((q)=>q.status === 'returned').length;\n                blocked = userIssuedQRs.filter((q)=>q.status === 'blocked').length;\n            }\n        } else {\n            // For system admin, show system-wide data\n            totalQRs = qrs.length;\n            unallocated = qrs.filter((q)=>q.status === 'unallocated').length;\n            allocated = qrs.filter((q)=>q.status === 'allocated').length;\n            issued = qrs.filter((q)=>q.status === 'issued').length;\n            returned = qrs.filter((q)=>q.status === 'returned').length;\n            blocked = qrs.filter((q)=>q.status === 'blocked').length;\n        }\n        // Branch approver specific stats\n        const pendingApprovals = filteredRequests.filter((r)=>r.status === 'pending').length;\n        const approvedRequests = filteredRequests.filter((r)=>r.status === 'approved').length;\n        const rejectedRequests = filteredRequests.filter((r)=>r.status === 'rejected').length;\n        const returnedForCorrection = filteredRequests.filter((r)=>{\n            var _r_notes;\n            return r.status === 'pending' && ((_r_notes = r.notes) === null || _r_notes === void 0 ? void 0 : _r_notes.includes('Returned for correction'));\n        }).length;\n        // Calculate pending KYC requests\n        const pendingKYC = branchId ? this.kycRequests.filter((kyc)=>kyc.branchId === branchId && kyc.status === 'pending').length : this.kycRequests.filter((kyc)=>kyc.status === 'pending').length;\n        // Top sellers filtered by branch\n        const topSellers = branchId ? this.getTopSellersByBranch(branchId, (currentUser === null || currentUser === void 0 ? void 0 : currentUser.role) === 'SALES_USER' ? currentUser.id : undefined) : this.getTopSellersGlobal();\n        // Top branches and regions - consistent with actual data\n        const topBranches = branchId ? [\n            {\n                name: ((_branches_find = branches.find((b)=>b.id === branchId)) === null || _branches_find === void 0 ? void 0 : _branches_find.name) || 'Current Branch',\n                count: issued\n            }\n        ] : [\n            {\n                name: 'Downtown Branch',\n                count: qrs.filter((q)=>q.allocatedBranchId === '1' && q.status === 'issued').length\n            },\n            {\n                name: 'Uptown Branch',\n                count: qrs.filter((q)=>q.allocatedBranchId === '2' && q.status === 'issued').length\n            },\n            {\n                name: 'Westside Branch',\n                count: qrs.filter((q)=>q.allocatedBranchId === '3' && q.status === 'issued').length\n            }\n        ];\n        const topRegions = !branchId ? [\n            {\n                name: 'Central Region',\n                count: qrs.filter((q)=>q.allocatedBranchId === '1' && q.status === 'issued').length,\n                branchCount: 1\n            },\n            {\n                name: 'North Region',\n                count: qrs.filter((q)=>q.allocatedBranchId === '2' && q.status === 'issued').length,\n                branchCount: 1\n            },\n            {\n                name: 'West Region',\n                count: qrs.filter((q)=>q.allocatedBranchId === '3' && q.status === 'issued').length,\n                branchCount: 1\n            }\n        ] : undefined;\n        return {\n            totalQRs,\n            unallocated,\n            allocated,\n            issued,\n            returned,\n            blocked,\n            pendingApprovals,\n            approvedRequests,\n            rejectedRequests,\n            returnedForCorrection,\n            topBranches,\n            topSellers,\n            topRegions,\n            recentActivity: filteredActivity.slice(-10),\n            pendingKYC\n        };\n    }\n    // Sync QR codes with users and branches to ensure data consistency\n    syncQRCodesWithUsersAndBranches() {\n        // Update QR codes to reflect current branch and user assignments\n        _mockData__WEBPACK_IMPORTED_MODULE_0__.mockQRCodes.forEach((qr)=>{\n            // Ensure allocated QRs have valid branch assignments\n            if (qr.status === 'allocated' && qr.allocatedBranchId) {\n                const branch = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockBranches.find((b)=>b.id === qr.allocatedBranchId);\n                if (!branch) {\n                    // Branch no longer exists, reset QR to unallocated\n                    qr.status = 'unallocated';\n                    qr.allocatedBranchId = undefined;\n                    qr.allocatedToUserId = undefined;\n                }\n            }\n            // Ensure issued QRs have valid user assignments\n            if (qr.status === 'issued' && qr.allocatedToUserId) {\n                const user = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockUsers.find((u)=>u.id === qr.allocatedToUserId);\n                if (!user || user.status === 'inactive') {\n                    // User no longer exists or is inactive, return QR to allocated status\n                    qr.status = 'allocated';\n                    qr.allocatedToUserId = undefined;\n                    qr.issuedToMerchantId = undefined;\n                }\n            }\n        });\n        // Log sync action\n        this.logAction('DATA_SYNC', 'system', {\n            timestamp: new Date().toISOString(),\n            qrCount: _mockData__WEBPACK_IMPORTED_MODULE_0__.mockQRCodes.length,\n            userCount: _mockData__WEBPACK_IMPORTED_MODULE_0__.mockUsers.length,\n            branchCount: _mockData__WEBPACK_IMPORTED_MODULE_0__.mockBranches.length\n        });\n    }\n    getTopSellersByBranch(branchId, currentUserId) {\n        var _mockBranches_find;\n        const branchName = ((_mockBranches_find = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockBranches.find((b)=>b.id === branchId)) === null || _mockBranches_find === void 0 ? void 0 : _mockBranches_find.name) || 'Unknown Branch';\n        let branchUsers = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockUsers.filter((u)=>u.branchId === branchId && u.role === 'SALES_USER');\n        // If currentUserId is provided (for sales users), show only their data\n        if (currentUserId) {\n            branchUsers = branchUsers.filter((u)=>u.id === currentUserId);\n        }\n        return branchUsers.map((user)=>{\n            const issuedCount = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockQRCodes.filter((qr)=>qr.allocatedBranchId === branchId && qr.status === 'issued' && qr.allocatedToUserId === user.id).length;\n            return {\n                name: user.name,\n                count: issuedCount,\n                branch: branchName,\n                userId: user.id\n            };\n        }).sort((a, b)=>b.count - a.count);\n    }\n    getTopSellersGlobal() {\n        const salesUsers = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockUsers.filter((u)=>u.role === 'sales_user');\n        return salesUsers.map((user)=>{\n            var _mockBranches_find;\n            const branchName = ((_mockBranches_find = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockBranches.find((b)=>b.id === user.branchId)) === null || _mockBranches_find === void 0 ? void 0 : _mockBranches_find.name) || 'Unknown Branch';\n            const issuedCount = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockQRCodes.filter((qr)=>qr.status === 'issued' && qr.allocatedToUserId === user.id).length;\n            return {\n                name: user.name,\n                count: issuedCount,\n                branch: branchName,\n                userId: user.id\n            };\n        }).sort((a, b)=>b.count - a.count);\n    }\n    async exportData(type) {\n        // Mock CSV export\n        let csvData = '';\n        switch(type){\n            case 'qr_codes':\n                csvData = 'ID,QR Value,Type,Status,Branch,Created At\\n';\n                _mockData__WEBPACK_IMPORTED_MODULE_0__.mockQRCodes.forEach((qr)=>{\n                    csvData += \"\".concat(qr.id, \",\").concat(qr.qrValue, \",\").concat(qr.qrType, \",\").concat(qr.status, \",\").concat(qr.allocatedBranchId || 'N/A', \",\").concat(qr.createdAt, \"\\n\");\n                });\n                break;\n            case 'allocations':\n                csvData = 'Request ID,Branch,Count,Status,Created At\\n';\n                _mockData__WEBPACK_IMPORTED_MODULE_0__.mockAllocationRequests.forEach((req)=>{\n                    csvData += \"\".concat(req.requestNumber, \",\").concat(req.branchId, \",\").concat(req.requestedQrCount, \",\").concat(req.status, \",\").concat(req.createdAt, \"\\n\");\n                });\n                break;\n        }\n        return new Blob([\n            csvData\n        ], {\n            type: 'text/csv'\n        });\n    }\n    // User Management\n    async createUser(userData) {\n        const newUser = {\n            id: \"user_\".concat(Date.now()),\n            username: userData.username,\n            email: userData.email,\n            name: userData.name,\n            role: userData.role,\n            branchId: userData.branchId,\n            phone: userData.phone,\n            status: 'active',\n            createdAt: new Date().toISOString()\n        };\n        _mockData__WEBPACK_IMPORTED_MODULE_0__.mockUsers.push(newUser);\n        this.logAction('USER_CREATED', 'user', newUser);\n        return newUser;\n    }\n    async getUsers() {\n        return [\n            ..._mockData__WEBPACK_IMPORTED_MODULE_0__.mockUsers\n        ];\n    }\n    async updateUser(userId, updates) {\n        const userIndex = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockUsers.findIndex((u)=>u.id === userId);\n        if (userIndex === -1) throw new Error('User not found');\n        _mockData__WEBPACK_IMPORTED_MODULE_0__.mockUsers[userIndex] = {\n            ..._mockData__WEBPACK_IMPORTED_MODULE_0__.mockUsers[userIndex],\n            ...updates\n        };\n        this.logAction('USER_UPDATED', 'user', {\n            userId,\n            updates\n        });\n        return _mockData__WEBPACK_IMPORTED_MODULE_0__.mockUsers[userIndex];\n    }\n    // Branch Management\n    async createBranch(branchData) {\n        const newBranch = {\n            id: \"branch_\".concat(Date.now()),\n            branchCode: branchData.branchCode,\n            name: branchData.name,\n            region: branchData.region,\n            type: branchData.type,\n            state: branchData.state,\n            country: branchData.country,\n            isActive: true,\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n        };\n        _mockData__WEBPACK_IMPORTED_MODULE_0__.mockBranches.push(newBranch);\n        this.logAction('BRANCH_CREATED', 'branch', newBranch);\n        return newBranch;\n    }\n    async getBranches() {\n        return [\n            ..._mockData__WEBPACK_IMPORTED_MODULE_0__.mockBranches\n        ];\n    }\n    async updateBranch(branchId, updates) {\n        const branchIndex = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockBranches.findIndex((b)=>b.id === branchId);\n        if (branchIndex === -1) throw new Error('Branch not found');\n        _mockData__WEBPACK_IMPORTED_MODULE_0__.mockBranches[branchIndex] = {\n            ..._mockData__WEBPACK_IMPORTED_MODULE_0__.mockBranches[branchIndex],\n            ...updates,\n            updatedAt: new Date().toISOString()\n        };\n        this.logAction('BRANCH_UPDATED', 'branch', {\n            branchId,\n            updates\n        });\n        return _mockData__WEBPACK_IMPORTED_MODULE_0__.mockBranches[branchIndex];\n    }\n    async deleteBranch(branchId) {\n        const branchIndex = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockBranches.findIndex((b)=>b.id === branchId);\n        if (branchIndex === -1) throw new Error('Branch not found');\n        // Check if branch has users\n        const branchUsers = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockUsers.filter((u)=>u.branchId === branchId);\n        if (branchUsers.length > 0) {\n            throw new Error('Cannot delete branch with existing users. Please reassign users first.');\n        }\n        _mockData__WEBPACK_IMPORTED_MODULE_0__.mockBranches.splice(branchIndex, 1);\n        this.logAction('BRANCH_DELETED', 'branch', {\n            branchId\n        });\n    }\n    async getDistinctRegions() {\n        const regions = new Set(_mockData__WEBPACK_IMPORTED_MODULE_0__.mockBranches.map((b)=>b.region));\n        return Array.from(regions);\n    }\n    async searchBranches(searchTerm) {\n        const term = searchTerm.toLowerCase();\n        return _mockData__WEBPACK_IMPORTED_MODULE_0__.mockBranches.filter((branch)=>branch.name.toLowerCase().includes(term) || branch.branchCode.toLowerCase().includes(term) || branch.region.toLowerCase().includes(term));\n    }\n    // Branch Inventory Management\n    async getBranchInventory(branchId) {\n        const currentUser = this.getCurrentUser();\n        const branches = branchId ? _mockData__WEBPACK_IMPORTED_MODULE_0__.mockBranches.filter((b)=>b.id === branchId) : _mockData__WEBPACK_IMPORTED_MODULE_0__.mockBranches;\n        return branches.map((branch)=>{\n            const branchQRs = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockQRCodes.filter((qr)=>qr.allocatedBranchId === branch.id);\n            let totalAllocated, issued, available, returned, blocked;\n            // For sales users, show only their QRs\n            if ((currentUser === null || currentUser === void 0 ? void 0 : currentUser.role) === 'sales_user' && currentUser.branchId === branch.id) {\n                const userQRs = branchQRs.filter((qr)=>qr.allocatedToUserId === currentUser.id);\n                totalAllocated = userQRs.length;\n                issued = userQRs.filter((qr)=>qr.status === 'issued').length;\n                available = userQRs.filter((qr)=>qr.status === 'allocated').length;\n                returned = userQRs.filter((qr)=>qr.status === 'returned').length;\n                blocked = userQRs.filter((qr)=>qr.status === 'blocked').length;\n            } else {\n                // For other roles, show branch-wide data\n                totalAllocated = branchQRs.length;\n                issued = branchQRs.filter((qr)=>qr.status === 'issued').length;\n                available = branchQRs.filter((qr)=>qr.status === 'allocated').length;\n                returned = branchQRs.filter((qr)=>qr.status === 'returned').length;\n                blocked = branchQRs.filter((qr)=>qr.status === 'blocked').length;\n            }\n            const utilizationRate = totalAllocated > 0 ? Math.round(issued / totalAllocated * 100) : 0;\n            return {\n                branchId: branch.id,\n                branchName: branch.name,\n                branchCode: branch.branchCode,\n                totalAllocated,\n                issued,\n                available,\n                returned,\n                blocked,\n                utilizationRate,\n                lastActivity: new Date().toISOString()\n            };\n        });\n    }\n    // Bulk QR Allocation\n    async bulkAllocateQRs(branchId, count) {\n        const unallocatedQRs = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockQRCodes.filter((qr)=>qr.status === 'unallocated').slice(0, count);\n        if (unallocatedQRs.length < count) {\n            throw new Error(\"Only \".concat(unallocatedQRs.length, \" unallocated QR codes available\"));\n        }\n        unallocatedQRs.forEach((qr)=>{\n            qr.status = 'allocated';\n            qr.allocatedBranchId = branchId;\n            qr.updatedAt = new Date().toISOString();\n        });\n        this.logAction('BULK_QR_ALLOCATED', 'qr_code', {\n            branchId,\n            count,\n            qrIds: unallocatedQRs.map((qr)=>qr.id)\n        });\n    }\n    // Bulk QR Assignment between branches\n    async bulkAssignQRs(sourceBranchId, targetBranchId, count) {\n        const sourceQRs = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockQRCodes.filter((qr)=>qr.allocatedBranchId === sourceBranchId && qr.status === 'allocated').slice(0, count);\n        if (sourceQRs.length < count) {\n            throw new Error(\"Only \".concat(sourceQRs.length, \" available QR codes in source branch\"));\n        }\n        sourceQRs.forEach((qr)=>{\n            qr.allocatedBranchId = targetBranchId;\n            qr.updatedAt = new Date().toISOString();\n        });\n        this.logAction('BULK_QR_ASSIGNED', 'qr_code', {\n            sourceBranchId,\n            targetBranchId,\n            count,\n            qrIds: sourceQRs.map((qr)=>qr.id)\n        });\n    }\n    // Threshold Requests\n    async createThresholdRequest(branchId, data) {\n        var _this_currentUser;\n        const request = {\n            id: \"thresh_\".concat(Date.now()),\n            branchId,\n            currentInventory: data.currentInventory,\n            threshold: data.threshold,\n            requestedAmount: data.requestedAmount,\n            reason: data.reason,\n            status: 'pending',\n            createdBy: ((_this_currentUser = this.currentUser) === null || _this_currentUser === void 0 ? void 0 : _this_currentUser.id) || '1',\n            createdAt: new Date().toISOString()\n        };\n        this.thresholdRequests.push(request);\n        this.logAction('THRESHOLD_REQUEST_CREATED', 'threshold_request', request);\n        return request;\n    }\n    async getThresholdRequests(branchId) {\n        let requests = [\n            ...this.thresholdRequests\n        ];\n        if (branchId) {\n            requests = requests.filter((r)=>r.branchId === branchId);\n        }\n        return requests.sort((a, b)=>new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n    }\n    async approveThresholdRequest(requestId, notes) {\n        const request = this.thresholdRequests.find((r)=>r.id === requestId);\n        if (request) {\n            var _this_currentUser;\n            request.status = 'approved';\n            request.reviewedBy = (_this_currentUser = this.currentUser) === null || _this_currentUser === void 0 ? void 0 : _this_currentUser.id;\n            request.reviewedAt = new Date().toISOString();\n            // Auto-allocate the requested QRs\n            await this.bulkAllocateQRs(request.branchId, request.requestedAmount);\n        }\n        this.logAction('THRESHOLD_REQUEST_APPROVED', 'threshold_request', {\n            requestId,\n            notes\n        });\n    }\n    async rejectThresholdRequest(requestId, reason) {\n        const request = this.thresholdRequests.find((r)=>r.id === requestId);\n        if (request) {\n            var _this_currentUser;\n            request.status = 'rejected';\n            request.reviewedBy = (_this_currentUser = this.currentUser) === null || _this_currentUser === void 0 ? void 0 : _this_currentUser.id;\n            request.reviewedAt = new Date().toISOString();\n        }\n        this.logAction('THRESHOLD_REQUEST_REJECTED', 'threshold_request', {\n            requestId,\n            reason\n        });\n    }\n    // Merchant Management\n    async createMerchant(merchantData) {\n        var _this_currentUser;\n        const newMerchant = {\n            id: \"merchant_\".concat(Date.now()),\n            legalName: merchantData.legalName,\n            shopName: merchantData.shopName,\n            address: merchantData.address,\n            phone: merchantData.phone,\n            email: merchantData.email,\n            kycStatus: 'pending',\n            branchId: (_this_currentUser = this.currentUser) === null || _this_currentUser === void 0 ? void 0 : _this_currentUser.branchId,\n            createdAt: new Date().toISOString()\n        };\n        this.merchants.push(newMerchant);\n        this.logAction('MERCHANT_CREATED', 'merchant', newMerchant);\n        return newMerchant;\n    }\n    async getMerchants(branchId) {\n        // Filter merchants by branch if branchId is provided\n        if (branchId) {\n            return this.merchants.filter((m)=>m.branchId === branchId);\n        }\n        return [\n            ...this.merchants\n        ];\n    }\n    async deleteMerchant(merchantId) {\n        const merchantIndex = this.merchants.findIndex((m)=>m.id === merchantId);\n        if (merchantIndex === -1) throw new Error('Merchant not found');\n        this.merchants.splice(merchantIndex, 1);\n        this.logAction('MERCHANT_DELETED', 'merchant', {\n            merchantId\n        });\n    }\n    // Merchant QR Requests\n    async createMerchantQRRequest(data) {\n        var _this_currentUser, _this_currentUser1;\n        const request = {\n            id: \"mer_req_\".concat(Date.now()),\n            merchantId: data.merchantId,\n            requestedBy: ((_this_currentUser = this.currentUser) === null || _this_currentUser === void 0 ? void 0 : _this_currentUser.id) || '1',\n            branchId: ((_this_currentUser1 = this.currentUser) === null || _this_currentUser1 === void 0 ? void 0 : _this_currentUser1.branchId) || '1',\n            requestedQrCount: data.requestedQrCount,\n            businessJustification: data.businessJustification,\n            status: 'pending',\n            createdAt: new Date().toISOString()\n        };\n        this.merchantRequests.push(request);\n        this.logAction('MERCHANT_QR_REQUEST_CREATED', 'merchant_request', request);\n        return request;\n    }\n    async getMerchantQRRequests(branchId) {\n        let requests = [\n            ...this.merchantRequests\n        ];\n        if (branchId) {\n            requests = requests.filter((r)=>r.branchId === branchId);\n        }\n        return requests.sort((a, b)=>new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n    }\n    async approveMerchantQRRequest(requestId, notes) {\n        const request = this.merchantRequests.find((r)=>r.id === requestId);\n        if (request) {\n            var _this_currentUser;\n            request.status = 'approved';\n            request.approvedBy = (_this_currentUser = this.currentUser) === null || _this_currentUser === void 0 ? void 0 : _this_currentUser.id;\n            request.approvedAt = new Date().toISOString();\n            // Auto-allocate QRs to the requesting branch\n            await this.bulkAllocateQRs(request.branchId, request.requestedQrCount);\n        }\n        this.logAction('MERCHANT_QR_REQUEST_APPROVED', 'merchant_request', {\n            requestId,\n            notes\n        });\n    }\n    async rejectMerchantQRRequest(requestId, reason) {\n        const request = this.merchantRequests.find((r)=>r.id === requestId);\n        if (request) {\n            var _this_currentUser;\n            request.status = 'rejected';\n            request.approvedBy = (_this_currentUser = this.currentUser) === null || _this_currentUser === void 0 ? void 0 : _this_currentUser.id;\n            request.rejectionReason = reason;\n        }\n        this.logAction('MERCHANT_QR_REQUEST_REJECTED', 'merchant_request', {\n            requestId,\n            reason\n        });\n    }\n    // KYC Management\n    async createKYCRequest(data) {\n        var _this_currentUser, _this_currentUser1;\n        // Check if KYC request already exists for this merchant\n        const existingRequest = this.kycRequests.find((r)=>r.merchantId === data.merchantId && r.status === 'pending');\n        if (existingRequest) {\n            throw new Error('A KYC request is already pending for this merchant');\n        }\n        const request = {\n            id: \"kyc_\".concat(Date.now()),\n            merchantId: data.merchantId,\n            requestedBy: ((_this_currentUser = this.currentUser) === null || _this_currentUser === void 0 ? void 0 : _this_currentUser.id) || '1',\n            branchId: ((_this_currentUser1 = this.currentUser) === null || _this_currentUser1 === void 0 ? void 0 : _this_currentUser1.branchId) || '1',\n            status: 'pending',\n            documents: data.documents,\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n        };\n        this.kycRequests.push(request);\n        this.logAction('KYC_REQUEST_CREATED', 'kyc_request', request);\n        return request;\n    }\n    async getKYCRequests(branchId) {\n        let requests = [\n            ...this.kycRequests\n        ];\n        if (branchId) {\n            requests = requests.filter((r)=>r.branchId === branchId);\n        }\n        return requests.sort((a, b)=>new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n    }\n    async approveKYCRequest(requestId, notes) {\n        const request = this.kycRequests.find((r)=>r.id === requestId);\n        if (request) {\n            var _this_currentUser;\n            request.status = 'approved';\n            request.reviewedBy = (_this_currentUser = this.currentUser) === null || _this_currentUser === void 0 ? void 0 : _this_currentUser.id;\n            request.reviewedAt = new Date().toISOString();\n            request.reviewNotes = notes;\n            request.updatedAt = new Date().toISOString();\n            // Update merchant KYC status\n            const merchant = this.merchants.find((m)=>m.id === request.merchantId);\n            if (merchant) {\n                merchant.kycStatus = 'verified';\n            }\n        }\n        this.logAction('KYC_REQUEST_APPROVED', 'kyc_request', {\n            requestId,\n            notes\n        });\n    }\n    async rejectKYCRequest(requestId, reason) {\n        const request = this.kycRequests.find((r)=>r.id === requestId);\n        if (request) {\n            var _this_currentUser;\n            request.status = 'rejected';\n            request.reviewedBy = (_this_currentUser = this.currentUser) === null || _this_currentUser === void 0 ? void 0 : _this_currentUser.id;\n            request.reviewedAt = new Date().toISOString();\n            request.reviewNotes = reason;\n            request.updatedAt = new Date().toISOString();\n            // Update merchant KYC status\n            const merchant = this.merchants.find((m)=>m.id === request.merchantId);\n            if (merchant) {\n                merchant.kycStatus = 'rejected';\n            }\n        }\n        this.logAction('KYC_REQUEST_REJECTED', 'kyc_request', {\n            requestId,\n            reason\n        });\n    }\n    // Audit Management (for Auditor role)\n    async getAuditLogs(filters) {\n        let logs = [\n            ..._mockData__WEBPACK_IMPORTED_MODULE_0__.mockAuditLogs\n        ];\n        if (filters === null || filters === void 0 ? void 0 : filters.dateFrom) {\n            logs = logs.filter((log)=>new Date(log.timestamp) >= new Date(filters.dateFrom));\n        }\n        if (filters === null || filters === void 0 ? void 0 : filters.dateTo) {\n            logs = logs.filter((log)=>new Date(log.timestamp) <= new Date(filters.dateTo));\n        }\n        if (filters === null || filters === void 0 ? void 0 : filters.actionType) {\n            logs = logs.filter((log)=>log.actionType === filters.actionType);\n        }\n        if (filters === null || filters === void 0 ? void 0 : filters.userId) {\n            logs = logs.filter((log)=>log.actorUserId === filters.userId);\n        }\n        if (filters === null || filters === void 0 ? void 0 : filters.branchId) {\n            logs = logs.filter((log)=>{\n                var _log_payload;\n                return ((_log_payload = log.payload) === null || _log_payload === void 0 ? void 0 : _log_payload.branchId) === filters.branchId;\n            });\n        }\n        return logs.sort((a, b)=>new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\n    }\n    async generateAuditReport(type, filters) {\n        var _this_currentUser;\n        const logs = await this.getAuditLogs(filters);\n        const report = {\n            id: \"audit_report_\".concat(Date.now()),\n            type,\n            generatedBy: (_this_currentUser = this.currentUser) === null || _this_currentUser === void 0 ? void 0 : _this_currentUser.id,\n            generatedAt: new Date().toISOString(),\n            filters,\n            summary: this.generateAuditSummary(logs, type),\n            details: this.generateAuditDetails(logs, type),\n            recommendations: this.generateAuditRecommendations(logs, type)\n        };\n        this.logAction('AUDIT_REPORT_GENERATED', 'audit_report', {\n            reportType: type,\n            filters\n        });\n        return report;\n    }\n    // Audit Item Management (for Auditor role)\n    async getAuditItems(filters) {\n        let items = [\n            ...this.auditItems\n        ];\n        if (filters === null || filters === void 0 ? void 0 : filters.category) {\n            items = items.filter((item)=>item.category === filters.category);\n        }\n        if (filters === null || filters === void 0 ? void 0 : filters.status) {\n            items = items.filter((item)=>item.status === filters.status);\n        }\n        if (filters === null || filters === void 0 ? void 0 : filters.riskLevel) {\n            items = items.filter((item)=>item.riskLevel === filters.riskLevel);\n        }\n        if (filters === null || filters === void 0 ? void 0 : filters.branchId) {\n            items = items.filter((item)=>item.branchId === filters.branchId);\n        }\n        if (filters === null || filters === void 0 ? void 0 : filters.dueDate) {\n            const filterDate = new Date(filters.dueDate);\n            items = items.filter((item)=>new Date(item.dueDate) <= filterDate);\n        }\n        return items.sort((a, b)=>new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime());\n    }\n    async updateAuditItem(itemId, updates) {\n        var _this_currentUser;\n        const itemIndex = this.auditItems.findIndex((item)=>item.id === itemId);\n        if (itemIndex === -1) throw new Error('Audit item not found');\n        const updatedItem = {\n            ...this.auditItems[itemIndex],\n            ...updates,\n            auditedBy: (_this_currentUser = this.currentUser) === null || _this_currentUser === void 0 ? void 0 : _this_currentUser.id,\n            auditedAt: new Date().toISOString(),\n            lastReviewDate: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n        };\n        this.auditItems[itemIndex] = updatedItem;\n        this.logAction('AUDIT_ITEM_UPDATED', 'audit_item', {\n            itemId,\n            updates\n        });\n        return updatedItem;\n    }\n    async createAuditItem(itemData) {\n        const newItem = {\n            id: \"audit_item_\".concat(Date.now()),\n            category: itemData.category,\n            subcategory: itemData.subcategory,\n            title: itemData.title,\n            description: itemData.description,\n            riskLevel: itemData.riskLevel,\n            status: 'pending',\n            dueDate: itemData.dueDate,\n            evidence: [],\n            targetEntity: itemData.targetEntity,\n            targetEntityId: itemData.targetEntityId,\n            branchId: itemData.branchId,\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n        };\n        this.auditItems.push(newItem);\n        this.logAction('AUDIT_ITEM_CREATED', 'audit_item', newItem);\n        return newItem;\n    }\n    async getAuditChecklists() {\n        // Update checklist scores based on current audit items\n        return this.auditChecklists.map((checklist)=>{\n            const items = this.auditItems.filter((item)=>checklist.items.some((checklistItem)=>checklistItem.id === item.id));\n            const completedItems = items.filter((item)=>item.status === 'compliant' || item.status === 'non_compliant' || item.status === 'requires_action');\n            const totalScore = items.reduce((sum, item)=>sum + (item.score || 0), 0);\n            const avgScore = items.length > 0 ? totalScore / items.length : 0;\n            const completionRate = items.length > 0 ? completedItems.length / items.length * 100 : 0;\n            return {\n                ...checklist,\n                items,\n                overallScore: Math.round(avgScore),\n                completionRate: Math.round(completionRate)\n            };\n        });\n    }\n    async generateAuditScorecard() {\n        let period = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 'current';\n        var _this_currentUser;\n        const items = this.auditItems;\n        const categories = [\n            'qr_management',\n            'user_access',\n            'data_protection',\n            'process_compliance',\n            'security_controls',\n            'kyc_verification'\n        ];\n        const categoryScores = categories.map((category)=>{\n            const categoryItems = items.filter((item)=>item.category === category);\n            const compliantCount = categoryItems.filter((item)=>item.status === 'compliant').length;\n            const nonCompliantCount = categoryItems.filter((item)=>item.status === 'non_compliant').length;\n            const pendingCount = categoryItems.filter((item)=>item.status === 'pending' || item.status === 'in_review').length;\n            const totalScore = categoryItems.reduce((sum, item)=>sum + (item.score || 0), 0);\n            const avgScore = categoryItems.length > 0 ? totalScore / categoryItems.length : 100;\n            return {\n                category: category.replace('_', ' ').replace(/\\b\\w/g, (l)=>l.toUpperCase()),\n                score: Math.round(avgScore),\n                itemCount: categoryItems.length,\n                compliantCount,\n                nonCompliantCount,\n                pendingCount\n            };\n        });\n        const overallScore = Math.round(categoryScores.reduce((sum, cat)=>sum + cat.score, 0) / categoryScores.length);\n        const highRiskIssues = items.filter((item)=>item.riskLevel === 'high' || item.riskLevel === 'critical').filter((item)=>item.status === 'non_compliant' || item.status === 'requires_action').length;\n        const riskLevel = highRiskIssues > 2 ? 'high' : highRiskIssues > 0 ? 'medium' : 'low';\n        return {\n            id: \"scorecard_\".concat(Date.now()),\n            period,\n            overallScore,\n            categoryScores,\n            riskAssessment: {\n                level: riskLevel,\n                score: overallScore,\n                issues: highRiskIssues,\n                recommendations: this.generateScorcardRecommendations(items)\n            },\n            trends: {\n                previousScore: overallScore - 2.3,\n                change: 2.3,\n                trend: 'improving'\n            },\n            generatedAt: new Date().toISOString(),\n            generatedBy: ((_this_currentUser = this.currentUser) === null || _this_currentUser === void 0 ? void 0 : _this_currentUser.id) || '9'\n        };\n    }\n    generateScorcardRecommendations(items) {\n        const recommendations = [];\n        const nonCompliantItems = items.filter((item)=>item.status === 'non_compliant');\n        const requiresActionItems = items.filter((item)=>item.status === 'requires_action');\n        const pendingItems = items.filter((item)=>item.status === 'pending');\n        if (nonCompliantItems.length > 0) {\n            recommendations.push(\"Address \".concat(nonCompliantItems.length, \" non-compliant items immediately\"));\n        }\n        if (requiresActionItems.length > 0) {\n            recommendations.push(\"Take action on \".concat(requiresActionItems.length, \" items requiring attention\"));\n        }\n        if (pendingItems.length > 0) {\n            recommendations.push(\"Complete review of \".concat(pendingItems.length, \" pending audit items\"));\n        }\n        // Add specific recommendations based on categories\n        const kycIssues = items.filter((item)=>item.category === 'kyc_verification' && (item.status === 'requires_action' || item.status === 'non_compliant'));\n        if (kycIssues.length > 0) {\n            recommendations.push('Implement automated KYC review reminders and SLA monitoring');\n        }\n        const securityIssues = items.filter((item)=>item.category === 'security_controls' && item.score && item.score < 90);\n        if (securityIssues.length > 0) {\n            recommendations.push('Enhance security controls and implement additional monitoring');\n        }\n        if (recommendations.length === 0) {\n            recommendations.push('Maintain current excellent compliance standards');\n            recommendations.push('Continue regular monitoring and review processes');\n        }\n        return recommendations;\n    }\n    generateAuditSummary(logs, type) {\n        const totalActions = logs.length;\n        const uniqueUsers = new Set(logs.map((log)=>log.actorUserId)).size;\n        const actionTypes = new Set(logs.map((log)=>log.actionType)).size;\n        switch(type){\n            case 'compliance':\n                return {\n                    totalActions,\n                    complianceScore: 96.8,\n                    criticalIssues: 0,\n                    warningIssues: 2,\n                    passedChecks: 45,\n                    failedChecks: 0\n                };\n            case 'security':\n                return {\n                    totalActions,\n                    securityScore: 98.2,\n                    securityEvents: logs.filter((log)=>log.actionType.includes('BLOCKED') || log.actionType.includes('REJECTED')).length,\n                    unauthorizedAttempts: 0,\n                    successfulLogins: logs.filter((log)=>log.actionType === 'USER_LOGIN').length,\n                    failedLogins: 0\n                };\n            case 'performance':\n                return {\n                    totalActions,\n                    avgResponseTime: '2.3 seconds',\n                    systemUptime: '99.8%',\n                    peakUsage: '85%',\n                    errorRate: '0.2%'\n                };\n            case 'user_activity':\n                return {\n                    totalActions,\n                    uniqueUsers,\n                    actionTypes,\n                    mostActiveUser: this.getMostActiveUser(logs),\n                    mostCommonAction: this.getMostCommonAction(logs)\n                };\n            default:\n                return {\n                    totalActions,\n                    uniqueUsers,\n                    actionTypes\n                };\n        }\n    }\n    generateAuditDetails(logs, type) {\n        switch(type){\n            case 'compliance':\n                return [\n                    {\n                        check: 'QR Code Generation Process',\n                        status: 'Passed',\n                        score: 100,\n                        details: 'All QR codes generated with proper authorization'\n                    },\n                    {\n                        check: 'Approval Workflow',\n                        status: 'Passed',\n                        score: 98,\n                        details: 'All requests follow proper approval chain'\n                    },\n                    {\n                        check: 'KYC Verification Process',\n                        status: 'Warning',\n                        score: 95,\n                        details: '2 KYC requests pending review beyond 48 hours'\n                    },\n                    {\n                        check: 'Data Retention Policy',\n                        status: 'Passed',\n                        score: 100,\n                        details: 'All audit logs properly maintained'\n                    },\n                    {\n                        check: 'User Access Controls',\n                        status: 'Passed',\n                        score: 99,\n                        details: 'Role-based access properly enforced'\n                    }\n                ];\n            case 'security':\n                return [\n                    {\n                        event: 'Authentication Events',\n                        count: logs.filter((log)=>log.actionType.includes('LOGIN')).length,\n                        severity: 'Info'\n                    },\n                    {\n                        event: 'QR Code Blocks',\n                        count: logs.filter((log)=>log.actionType === 'QR_BLOCKED').length,\n                        severity: 'Medium'\n                    },\n                    {\n                        event: 'Failed Approvals',\n                        count: logs.filter((log)=>log.actionType === 'REQUEST_REJECTED').length,\n                        severity: 'Low'\n                    },\n                    {\n                        event: 'System Access',\n                        count: logs.filter((log)=>log.actionType.includes('SYSTEM')).length,\n                        severity: 'Info'\n                    }\n                ];\n            case 'performance':\n                return [\n                    {\n                        metric: 'QR Generation Speed',\n                        value: '0.8 seconds',\n                        target: '< 2 seconds',\n                        status: 'Excellent'\n                    },\n                    {\n                        metric: 'Request Processing Time',\n                        value: '2.3 hours',\n                        target: '< 4 hours',\n                        status: 'Good'\n                    },\n                    {\n                        metric: 'System Response Time',\n                        value: '1.2 seconds',\n                        target: '< 3 seconds',\n                        status: 'Excellent'\n                    },\n                    {\n                        metric: 'Database Query Performance',\n                        value: '0.3 seconds',\n                        target: '< 1 second',\n                        status: 'Excellent'\n                    }\n                ];\n            case 'user_activity':\n                return this.getUserActivityBreakdown(logs);\n            default:\n                return [];\n        }\n    }\n    generateAuditRecommendations(logs, type) {\n        switch(type){\n            case 'compliance':\n                return [\n                    'Implement automated KYC review reminders for requests pending over 24 hours',\n                    'Consider adding additional approval checkpoints for high-value QR requests',\n                    'Review and update data retention policies quarterly'\n                ];\n            case 'security':\n                return [\n                    'Enable two-factor authentication for all administrative users',\n                    'Implement automated security monitoring for unusual access patterns',\n                    'Regular security training for all users recommended'\n                ];\n            case 'performance':\n                return [\n                    'System performance is excellent, maintain current infrastructure',\n                    'Consider load balancing for future scaling',\n                    'Monitor database performance during peak usage periods'\n                ];\n            case 'user_activity':\n                return [\n                    'Provide additional training for users with low activity levels',\n                    'Recognize high-performing users in monthly reviews',\n                    'Consider workflow optimization for frequently performed actions'\n                ];\n            default:\n                return [];\n        }\n    }\n    getMostActiveUser(logs) {\n        var _Object_entries_sort_;\n        const userCounts = logs.reduce((acc, log)=>{\n            acc[log.actorUserId] = (acc[log.actorUserId] || 0) + 1;\n            return acc;\n        }, {});\n        const mostActiveUserId = (_Object_entries_sort_ = Object.entries(userCounts).sort((param, param1)=>{\n            let [, a] = param, [, b] = param1;\n            return b - a;\n        })[0]) === null || _Object_entries_sort_ === void 0 ? void 0 : _Object_entries_sort_[0];\n        const user = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockUsers.find((u)=>u.id === mostActiveUserId);\n        return user ? user.name : 'Unknown';\n    }\n    getMostCommonAction(logs) {\n        var _Object_entries_sort_;\n        const actionCounts = logs.reduce((acc, log)=>{\n            acc[log.actionType] = (acc[log.actionType] || 0) + 1;\n            return acc;\n        }, {});\n        return ((_Object_entries_sort_ = Object.entries(actionCounts).sort((param, param1)=>{\n            let [, a] = param, [, b] = param1;\n            return b - a;\n        })[0]) === null || _Object_entries_sort_ === void 0 ? void 0 : _Object_entries_sort_[0]) || 'None';\n    }\n    getUserActivityBreakdown(logs) {\n        const userActivity = logs.reduce((acc, log)=>{\n            if (!acc[log.actorUserId]) {\n                const user = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockUsers.find((u)=>u.id === log.actorUserId);\n                acc[log.actorUserId] = {\n                    userId: log.actorUserId,\n                    userName: (user === null || user === void 0 ? void 0 : user.name) || 'Unknown',\n                    userRole: (user === null || user === void 0 ? void 0 : user.role) || 'Unknown',\n                    actions: []\n                };\n            }\n            acc[log.actorUserId].actions.push(log);\n            return acc;\n        }, {});\n        return Object.values(userActivity).map((user)=>{\n            var _user_actions_;\n            return {\n                ...user,\n                totalActions: user.actions.length,\n                lastActivity: (_user_actions_ = user.actions[0]) === null || _user_actions_ === void 0 ? void 0 : _user_actions_.timestamp,\n                actionBreakdown: user.actions.reduce((acc, action)=>{\n                    acc[action.actionType] = (acc[action.actionType] || 0) + 1;\n                    return acc;\n                }, {})\n            };\n        });\n    }\n    // Region Performance\n    async getRegionPerformance(regionName) {\n        const regions = [\n            {\n                name: 'Central Region',\n                branches: [\n                    'Downtown Branch',\n                    'Midtown Branch'\n                ],\n                totalQRs: 145,\n                issued: 98\n            },\n            {\n                name: 'North Region',\n                branches: [\n                    'Uptown Branch',\n                    'Northside Branch'\n                ],\n                totalQRs: 132,\n                issued: 87\n            },\n            {\n                name: 'West Region',\n                branches: [\n                    'Westside Branch',\n                    'West End Branch'\n                ],\n                totalQRs: 98,\n                issued: 65\n            }\n        ];\n        if (regionName) {\n            return regions.filter((r)=>r.name === regionName);\n        }\n        return regions;\n    }\n    // Seller Performance\n    async getSellerPerformance(sellerName) {\n        const sellers = [\n            {\n                name: 'Mike Sales',\n                userId: 'sales_001',\n                branch: 'Downtown Branch',\n                totalSales: 23,\n                thisMonth: 8,\n                lastMonth: 15,\n                avgPerWeek: 5.8,\n                topMerchants: [\n                    'Shop A',\n                    'Store B',\n                    'Market C'\n                ]\n            },\n            {\n                name: 'Sarah Johnson',\n                userId: 'sales_002',\n                branch: 'Uptown Branch',\n                totalSales: 19,\n                thisMonth: 6,\n                lastMonth: 13,\n                avgPerWeek: 4.8,\n                topMerchants: [\n                    'Cafe X',\n                    'Restaurant Y',\n                    'Shop Z'\n                ]\n            },\n            {\n                name: 'David Chen',\n                userId: 'sales_003',\n                branch: 'Westside Branch',\n                totalSales: 16,\n                thisMonth: 5,\n                lastMonth: 11,\n                avgPerWeek: 4.0,\n                topMerchants: [\n                    'Store 1',\n                    'Shop 2',\n                    'Market 3'\n                ]\n            }\n        ];\n        if (sellerName) {\n            return sellers.filter((s)=>s.name === sellerName);\n        }\n        return sellers;\n    }\n    // Update QR Code\n    async updateQRCode(qrId, updates) {\n        const qr = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockQRCodes.find((q)=>q.id === qrId);\n        if (qr) {\n            if (updates.merchantId) qr.merchantId = updates.merchantId;\n            if (updates.terminalId) qr.terminalId = updates.terminalId;\n            if (updates.notes) qr.notes = updates.notes;\n            qr.updatedAt = new Date().toISOString();\n        }\n        this.logAction('QR_UPDATED', 'qr_code', {\n            qrId,\n            updates\n        });\n    }\n    async updateQRStatus(qrId, status, reason) {\n        const qr = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockQRCodes.find((q)=>q.id === qrId);\n        if (qr) {\n            const oldStatus = qr.status;\n            qr.status = status;\n            qr.updatedAt = new Date().toISOString();\n            // Add status change to notes\n            const statusChangeNote = \"Status changed from \".concat(oldStatus, \" to \").concat(status, \". Reason: \").concat(reason);\n            qr.notes = qr.notes ? \"\".concat(qr.notes, \"\\n\").concat(statusChangeNote) : statusChangeNote;\n        }\n        this.logAction('QR_STATUS_UPDATED', 'qr_code', {\n            qrId,\n            oldStatus: qr === null || qr === void 0 ? void 0 : qr.status,\n            newStatus: status,\n            reason\n        });\n    }\n    async blockQRCode(qrId, reason) {\n        const qr = _mockData__WEBPACK_IMPORTED_MODULE_0__.mockQRCodes.find((q)=>q.id === qrId);\n        if (qr) {\n            var _this_currentUser;\n            qr.status = 'blocked';\n            qr.blockedReason = reason;\n            qr.blockedAt = new Date().toISOString();\n            qr.blockedBy = ((_this_currentUser = this.currentUser) === null || _this_currentUser === void 0 ? void 0 : _this_currentUser.id) || 'system';\n            qr.updatedAt = new Date().toISOString();\n        }\n        this.logAction('QR_BLOCKED', 'qr_code', {\n            qrId,\n            reason\n        });\n    }\n    logAction(action, entity, payload) {\n        var _this_currentUser;\n        const log = {\n            id: \"log_\".concat(Date.now(), \"_\").concat(Math.random()),\n            actorUserId: ((_this_currentUser = this.currentUser) === null || _this_currentUser === void 0 ? void 0 : _this_currentUser.id) || 'system',\n            actionType: action,\n            targetEntity: entity,\n            payload,\n            timestamp: new Date().toISOString()\n        };\n        _mockData__WEBPACK_IMPORTED_MODULE_0__.mockAuditLogs.unshift(log);\n    }\n    constructor(){\n        this.currentUser = null;\n        this.thresholdRequests = [];\n        this.merchantRequests = [];\n        this.merchants = [\n            ..._mockData__WEBPACK_IMPORTED_MODULE_0__.mockMerchants\n        ];\n        this.kycRequests = [\n            ..._mockData__WEBPACK_IMPORTED_MODULE_0__.mockKYCRequests\n        ];\n        this.auditItems = [\n            ..._mockData__WEBPACK_IMPORTED_MODULE_0__.mockAuditItems\n        ];\n        this.auditChecklists = [\n            ..._mockData__WEBPACK_IMPORTED_MODULE_0__.mockAuditChecklists\n        ];\n    }\n}\nconst apiService = new ApiService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./services/api.ts\n"));

/***/ })

});